.tests-common:
  extends: .go-mod-cache
  stage: test
  tags:
    - gitlab-org-docker
  needs: ['download deps']
  artifacts:
    reports:
      junit: junit-test-report.xml

.tests-unit:
  extends: .tests-common
  script:
    - echo "Running all unit tests without daemonizing..."
    - make test ARGS='-short'

.tests-acceptance-tmpdir:
  extends: .tests-common
  script:
    - echo "Running just the acceptance tests daemonized (tmpdir)...."
    - TEST_DAEMONIZE=tmpdir make acceptance

.tests-acceptance-inplace:
  extends: .tests-common
  script:
    - echo "Running just the acceptance tests daemonized (inplace)...."
    - TEST_DAEMONIZE=inplace make acceptance

test:1.16:
  extends: .tests-unit
  image: golang:1.16

test-acceptance:1.16:
  extends: .tests-acceptance-tmpdir
  image: golang:1.16

test-acceptance-inplace:1.16:
  extends: .tests-acceptance-inplace
  image: golang:1.16

test:1.17:
  extends: .tests-unit
  image: golang:1.17

test-acceptance:1.17:
  extends: .tests-acceptance-tmpdir
  image: golang:1.17

test-acceptance-inplace:1.17:
  extends: .tests-acceptance-inplace
  image: golang:1.17

race:
  extends: .tests-common
  script:
    - echo "Running race detector"
    - make setup
    - make race

cover:
  extends: .tests-common
  script:
    - make generate-mocks
    - make cover
  coverage: '/total:.+\(statements\).+\d+\.\d+/'
  artifacts:
    paths:
      - coverage.html

code_quality:
  extends: .tests-common
  image: golangci/golangci-lint:v1.41.1
  variables:
    REPORT_FILE: gl-code-quality-report.json
    LINT_FLAGS: "--color never --deadline 15m"
    OUT_FORMAT: code-climate
  script:
    - golangci-lint run ./... --out-format ${OUT_FORMAT} ${LINT_FLAGS} | tee ${REPORT_FILE}
  timeout: 15 minutes
  artifacts:
    reports:
      codequality: ${REPORT_FILE}
    paths:
      - ${REPORT_FILE}

check deps:
  extends: .tests-common
  script:
    - make deps-check
